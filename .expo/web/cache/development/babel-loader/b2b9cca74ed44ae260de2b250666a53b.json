{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/nmicjime/Desktop/TLG_ReactNative_Project/views/game/game.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport { GameEngine } from 'react-native-game-engine';\nimport Matter from 'matter-js';\nimport randomInt from 'random-int';\nimport { Accelerometer } from 'expo-sensors';\nimport { get as _get } from 'lodash';\nimport GameOver from \"./game-over\";\nimport { Rocket, Floor, Star, Satellite, Planet, UFO } from \"./renderers\";\nimport { Tilt, Physics, Trajectory } from \"./systems\";\nimport Score from \"./score\";\nimport styles from \"./game-styles\";\nvar STAR_COUNT = 20;\nvar INIT_COMPLEXITY = 3;\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar COUNTER = 1;\n\nvar Game = function (_PureComponent) {\n  _inherits(Game, _PureComponent);\n\n  var _super = _createSuper(Game);\n\n  function Game(props) {\n    var _this;\n\n    _classCallCheck(this, Game);\n\n    _this = _super.call(this, props);\n\n    _this.handleAppStateChange = function (nextAppState) {\n      _this.setState({\n        appState: nextAppState\n      }, _this.incrementScore);\n    };\n\n    _this.reloadApp = function () {\n      var engine = _this.state.entities.physics.engine;\n      Matter.World.clear(engine.world);\n      Matter.Engine.clear(engine);\n      Matter.Events.off(engine, 'collisionStart');\n\n      var newState = _objectSpread({}, _this.initState);\n\n      _this.setState(newState, function () {\n        _this.refs.engine.swap(newState.entities);\n\n        _this.incrementScore();\n      });\n    };\n\n    _this.incrementScore = function () {\n      var _this$state = _this.state,\n          showOverlay = _this$state.showOverlay,\n          appState = _this$state.appState;\n\n      if (!showOverlay && appState === 'active') {\n        _this.setState(function (_ref) {\n          var score = _ref.score;\n          var increase = Math.floor(score / 50);\n          var complexity = increase < 3 ? 3 : increase;\n          return {\n            score: score + 1,\n            complexity: complexity\n          };\n        }, function () {\n          return setTimeout(_this.incrementScore, 100);\n        });\n      }\n    };\n\n    _this.setupCollisionHandler = function (engine) {\n      Matter.Events.on(engine, 'collisionStart', function (event) {\n        var pairs = event.pairs;\n        var objA = pairs[0].bodyA.label;\n        var objB = pairs[0].bodyB.label;\n\n        if (objA === 'floor' && objB === 'star') {\n          Matter.Body.setPosition(pairs[0].bodyB, {\n            x: randomInt(1, width - 10),\n            y: 0\n          });\n        }\n\n        if (objA === 'floor' && objB === 'obstacle') {\n          Matter.Body.set(pairs[0].bodyB, {\n            trajectory: randomInt(-5, 5) / 10\n          });\n          Matter.Body.setPosition(pairs[0].bodyB, {\n            x: randomInt(1, width - 30),\n            y: randomInt(0, -100)\n          });\n        }\n\n        if (objA === 'rocket' && objB === 'obstacle') {\n          _this.setState({\n            showOverlay: true\n          });\n        }\n      });\n    };\n\n    _this.getSatellite = function () {\n      var body = Matter.Bodies.rectangle(randomInt(1, width - 50), randomInt(0, -200), 75, 45, {\n        frictionAir: 0.05,\n        label: 'obstacle',\n        trajectory: randomInt(-5, 5) / 10\n      });\n      var satellite = {\n        body: body,\n        size: [75, 50],\n        renderer: Satellite\n      };\n      return {\n        obstacle: satellite,\n        body: body\n      };\n    };\n\n    _this.getPlanet = function () {\n      var body = Matter.Bodies.rectangle(randomInt(1, width - 50), randomInt(0, -200), 60, 35, {\n        frictionAir: 0.05,\n        label: 'obstacle',\n        trajectory: randomInt(-5, 5) / 10\n      });\n      var planet = {\n        body: body,\n        size: [75, 50],\n        renderer: Planet\n      };\n      return {\n        obstacle: planet,\n        body: body\n      };\n    };\n\n    _this.getUFO = function () {\n      var body = Matter.Bodies.rectangle(randomInt(1, width - 50), randomInt(0, -200), 50, 20, {\n        frictionAir: 0.05,\n        label: 'obstacle',\n        trajectory: randomInt(-5, 5) / 10\n      });\n      var ufo = {\n        body: body,\n        size: [50, 20],\n        renderer: UFO\n      };\n      return {\n        obstacle: ufo,\n        body: body\n      };\n    };\n\n    _this.state = _this.initState;\n    return _this;\n  }\n\n  _createClass(Game, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this._subscription = Accelerometer.addListener(function (_ref2) {\n        var x = _ref2.x;\n        Matter.Body.set(_this2.refs.engine.state.entities.rocket.body, {\n          tilt: x\n        });\n      });\n      this.incrementScore();\n      AppState.addEventListener('change', this.handleAppStateChange);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this3 = this;\n\n      var complexity = this.state.complexity;\n\n      if (complexity !== prevState.complexity && complexity !== INIT_COMPLEXITY) {\n        var world = this.refs.engine.props.entities.physics.world;\n        var _this$obstacle = this.obstacle,\n            obstacle = _this$obstacle.obstacle,\n            body = _this$obstacle.body;\n        Matter.World.addBody(world, body);\n\n        var updatedObstacles = _objectSpread(_objectSpread({}, this.state.entities), {}, _defineProperty({}, \"obstacle_\" + COUNTER, obstacle));\n\n        COUNTER += 1;\n        this.setState({\n          entities: updatedObstacles\n        }, function () {\n          return _this3.refs.engine.swap(updatedObstacles);\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._subscription && this._subscription.remove();\n      this._subscription = null;\n      AppState.removeEventListener('change', this.handleAppStateChange);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          showOverlay = _this$state2.showOverlay,\n          entities = _this$state2.entities,\n          score = _this$state2.score,\n          appState = _this$state2.appState;\n      return React.createElement(GameEngine, {\n        style: styles.container,\n        ref: \"engine\",\n        systems: [Physics, Tilt, Trajectory],\n        entities: entities,\n        running: appState === 'active',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 7\n        }\n      }, React.createElement(Score, {\n        score: score,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }), React.createElement(StatusBar, {\n        hidden: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }\n      }), React.createElement(GameOver, {\n        showOverlay: showOverlay,\n        score: score,\n        reloadApp: this.reloadApp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 9\n        }\n      }));\n    }\n  }, {\n    key: \"stars\",\n    get: function get() {\n      var stars = {};\n\n      for (var x = 1; x <= STAR_COUNT; x++) {\n        var size = randomInt(10, 20);\n\n        _extends(stars, _defineProperty({}, \"star_\" + x, {\n          body: Matter.Bodies.rectangle(randomInt(1, width - 10), randomInt(0, height), size, size, {\n            frictionAir: 0.1,\n            isSensor: true,\n            label: 'star'\n          }),\n          opacity: randomInt(1, 5) / 10,\n          size: [size, size],\n          renderer: Star\n        }));\n      }\n\n      var starsInWorld = Object.values(stars).map(function (star) {\n        return star.body;\n      });\n      return {\n        stars: stars,\n        starsInWorld: starsInWorld\n      };\n    }\n  }, {\n    key: \"obstacle\",\n    get: function get() {\n      var options = [this.getSatellite, this.getPlanet, this.getUFO];\n      var ind = randomInt(0, options.length - 1);\n\n      var _options$ind = options[ind](),\n          obstacle = _options$ind.obstacle,\n          body = _options$ind.body;\n\n      return {\n        obstacle: obstacle,\n        body: body\n      };\n    }\n  }, {\n    key: \"obstacles\",\n    get: function get() {\n      var obstacles = {};\n      var bodies = [];\n\n      for (var i = 0; i < 3; i++) {\n        var _this$obstacle2 = this.obstacle,\n            obstacle = _this$obstacle2.obstacle,\n            body = _this$obstacle2.body;\n\n        _extends(obstacles, _defineProperty({}, \"obstacle_\" + COUNTER, obstacle));\n\n        bodies.push(body);\n        COUNTER += 1;\n      }\n\n      return {\n        obstacles: obstacles,\n        bodies: bodies\n      };\n    }\n  }, {\n    key: \"initState\",\n    get: function get() {\n      return {\n        complexity: INIT_COMPLEXITY,\n        score: 0,\n        entities: this.entities,\n        showOverlay: false,\n        appState: 'active',\n        objectCounter: 1\n      };\n    }\n  }, {\n    key: \"entities\",\n    get: function get() {\n      var engine = _get(this, 'state.entities.physics.engine') || Matter.Engine.create({\n        enableSleeping: false\n      });\n      var world = engine.world;\n      var rocket = Matter.Bodies.rectangle(width / 2, height - 200, 25, 50, {\n        isStatic: true,\n        tilt: 0,\n        label: 'rocket'\n      });\n      var floor = Matter.Bodies.rectangle(width / 2, height, width + 100, 10, {\n        isStatic: true,\n        isSensor: true,\n        label: 'floor'\n      });\n      var _this$obstacles = this.obstacles,\n          obstacles = _this$obstacles.obstacles,\n          bodies = _this$obstacles.bodies;\n      var _this$stars = this.stars,\n          stars = _this$stars.stars,\n          starsInWorld = _this$stars.starsInWorld;\n      this.setupCollisionHandler(engine);\n      Matter.World.add(world, [rocket, floor].concat(_toConsumableArray(bodies), _toConsumableArray(starsInWorld)));\n      return _objectSpread(_objectSpread(_objectSpread({\n        physics: {\n          engine: engine,\n          world: world\n        }\n      }, stars), obstacles), {}, {\n        rocket: {\n          body: rocket,\n          size: [50, 100],\n          renderer: Rocket\n        },\n        floor: {\n          body: floor,\n          size: [width + 100, 5],\n          renderer: Floor\n        }\n      });\n    }\n  }]);\n\n  return Game;\n}(PureComponent);\n\nGame.navigationOptions = {\n  headerShown: false\n};\nexport default Game;","map":{"version":3,"sources":["/Users/nmicjime/Desktop/TLG_ReactNative_Project/views/game/game.js"],"names":["React","PureComponent","GameEngine","Matter","randomInt","Accelerometer","get","GameOver","Rocket","Floor","Star","Satellite","Planet","UFO","Tilt","Physics","Trajectory","Score","styles","STAR_COUNT","INIT_COMPLEXITY","Dimensions","width","height","COUNTER","Game","props","handleAppStateChange","nextAppState","setState","appState","incrementScore","reloadApp","engine","state","entities","physics","World","clear","world","Engine","Events","off","newState","initState","refs","swap","showOverlay","score","increase","Math","floor","complexity","setTimeout","setupCollisionHandler","on","event","pairs","objA","bodyA","label","objB","bodyB","Body","setPosition","x","y","set","trajectory","getSatellite","body","Bodies","rectangle","frictionAir","satellite","size","renderer","obstacle","getPlanet","planet","getUFO","ufo","_subscription","addListener","rocket","tilt","AppState","addEventListener","prevProps","prevState","addBody","updatedObstacles","remove","removeEventListener","container","stars","isSensor","opacity","starsInWorld","Object","values","map","star","options","ind","length","obstacles","bodies","i","push","objectCounter","create","enableSleeping","isStatic","add","navigationOptions","headerShown"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { StatusBar, Dimensions, AppState } from 'react-native';\nimport { GameEngine } from 'react-native-game-engine';\nimport Matter from 'matter-js';\nimport randomInt from 'random-int';\nimport { Accelerometer } from 'expo-sensors';\nimport { get } from 'lodash';\nimport GameOver from './game-over';\n\nimport { Rocket, Floor, Star, Satellite, Planet, UFO } from './renderers';\nimport { Tilt, Physics, Trajectory } from './systems';\nimport Score from './score';\nimport styles from './game-styles';\n\nconst STAR_COUNT = 20;\nconst INIT_COMPLEXITY = 3;\nconst { width, height } = Dimensions.get('window');\n\nlet COUNTER = 1;\n\nclass Game extends PureComponent {\n  static navigationOptions = {\n    headerShown: false,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = this.initState;\n  }\n\n  componentDidMount() {\n    this._subscription = Accelerometer.addListener(({ x }) => {\n      Matter.Body.set(this.refs.engine.state.entities.rocket.body, {\n        tilt: x,\n      });\n    });\n\n    this.incrementScore();\n    AppState.addEventListener('change', this.handleAppStateChange);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { complexity } = this.state;\n    if (complexity !== prevState.complexity && complexity !== INIT_COMPLEXITY) {\n      const { world } = this.refs.engine.props.entities.physics;\n      const { obstacle, body } = this.obstacle;\n\n      Matter.World.addBody(world, body);\n      const updatedObstacles = {\n        ...this.state.entities,\n        [`obstacle_${COUNTER}`]: obstacle,\n      };\n\n      COUNTER += 1;\n\n      this.setState({ entities: updatedObstacles }, () => this.refs.engine.swap(updatedObstacles));\n    }\n  }\n\n  componentWillUnmount() {\n    this._subscription && this._subscription.remove();\n    this._subscription = null;\n    AppState.removeEventListener('change', this.handleAppStateChange);\n  }\n\n  handleAppStateChange = nextAppState => {\n    this.setState({ appState: nextAppState }, this.incrementScore);\n  };\n\n  reloadApp = () => {\n    const { engine } = this.state.entities.physics;\n    Matter.World.clear(engine.world);\n    Matter.Engine.clear(engine);\n    Matter.Events.off(engine, 'collisionStart'); // clear all past events;\n\n    const newState = {\n      ...this.initState,\n    };\n    this.setState(newState, () => {\n      this.refs.engine.swap(newState.entities);\n      this.incrementScore();\n    });\n  };\n\n  incrementScore = () => {\n    const { showOverlay, appState } = this.state;\n    if (!showOverlay && appState === 'active') {\n      this.setState(\n        ({ score }) => {\n          const increase = Math.floor(score / 50);\n          const complexity = increase < 3 ? 3 : increase;\n\n          return { score: score + 1, complexity };\n        },\n        () => setTimeout(this.incrementScore, 100)\n      );\n    }\n  };\n\n  setupCollisionHandler = engine => {\n    Matter.Events.on(engine, 'collisionStart', event => {\n      const { pairs } = event;\n      const objA = pairs[0].bodyA.label;\n      const objB = pairs[0].bodyB.label;\n\n      if (objA === 'floor' && objB === 'star') {\n        Matter.Body.setPosition(pairs[0].bodyB, {\n          x: randomInt(1, width - 10),\n          y: 0,\n        });\n      }\n\n      if (objA === 'floor' && objB === 'obstacle') {\n        Matter.Body.set(pairs[0].bodyB, {\n          trajectory: randomInt(-5, 5) / 10,\n        });\n        Matter.Body.setPosition(pairs[0].bodyB, {\n          x: randomInt(1, width - 30),\n          y: randomInt(0, -100),\n        });\n      }\n\n      if (objA === 'rocket' && objB === 'obstacle') {\n        this.setState({ showOverlay: true });\n      }\n    });\n  };\n\n  get stars() {\n    const stars = {};\n    for (let x = 1; x <= STAR_COUNT; x++) {\n      const size = randomInt(10, 20);\n      Object.assign(stars, {\n        [`star_${x}`]: {\n          body: Matter.Bodies.rectangle(\n            randomInt(1, width - 10),\n            randomInt(0, height),\n            size,\n            size,\n            {\n              frictionAir: 0.1,\n              isSensor: true,\n              label: 'star',\n            }\n          ),\n          opacity: randomInt(1, 5) / 10,\n          size: [size, size],\n          renderer: Star,\n        },\n      });\n    }\n\n    const starsInWorld = Object.values(stars).map(star => star.body);\n    return { stars, starsInWorld };\n  }\n\n  get obstacle() {\n    const options = [this.getSatellite, this.getPlanet, this.getUFO];\n    const ind = randomInt(0, options.length - 1);\n    const { obstacle, body } = options[ind]();\n\n    return { obstacle, body };\n  }\n\n  getSatellite = () => {\n    const body = Matter.Bodies.rectangle(randomInt(1, width - 50), randomInt(0, -200), 75, 45, {\n      frictionAir: 0.05,\n      label: 'obstacle',\n      trajectory: randomInt(-5, 5) / 10,\n    });\n    const satellite = { body, size: [75, 50], renderer: Satellite };\n\n    return { obstacle: satellite, body };\n  };\n\n  getPlanet = () => {\n    const body = Matter.Bodies.rectangle(randomInt(1, width - 50), randomInt(0, -200), 60, 35, {\n      frictionAir: 0.05,\n      label: 'obstacle',\n      trajectory: randomInt(-5, 5) / 10,\n    });\n    const planet = { body, size: [75, 50], renderer: Planet };\n\n    return { obstacle: planet, body };\n  };\n\n  getUFO = () => {\n    const body = Matter.Bodies.rectangle(randomInt(1, width - 50), randomInt(0, -200), 50, 20, {\n      frictionAir: 0.05,\n      label: 'obstacle',\n      trajectory: randomInt(-5, 5) / 10,\n    });\n    const ufo = { body, size: [50, 20], renderer: UFO };\n\n    return { obstacle: ufo, body };\n  };\n\n  get obstacles() {\n    const obstacles = {};\n    const bodies = [];\n\n    for (let i = 0; i < 3; i++) {\n      const { obstacle, body } = this.obstacle;\n      Object.assign(obstacles, { [`obstacle_${COUNTER}`]: obstacle });\n      bodies.push(body);\n\n      COUNTER += 1;\n    }\n\n    return { obstacles, bodies };\n  }\n\n  get initState() {\n    return {\n      complexity: INIT_COMPLEXITY,\n      score: 0,\n      entities: this.entities,\n      showOverlay: false,\n      appState: 'active',\n      objectCounter: 1,\n    };\n  }\n\n  get entities() {\n    const engine =\n      get(this, 'state.entities.physics.engine') || Matter.Engine.create({ enableSleeping: false });\n    const { world } = engine;\n    const rocket = Matter.Bodies.rectangle(width / 2, height - 200, 25, 50, {\n      isStatic: true,\n      tilt: 0,\n      label: 'rocket',\n    });\n    const floor = Matter.Bodies.rectangle(width / 2, height, width + 100, 10, {\n      isStatic: true,\n      isSensor: true,\n      label: 'floor',\n    });\n    const { obstacles, bodies } = this.obstacles;\n    const { stars, starsInWorld } = this.stars;\n\n    this.setupCollisionHandler(engine);\n    Matter.World.add(world, [rocket, floor, ...bodies, ...starsInWorld]);\n\n    return {\n      physics: {\n        engine,\n        world,\n      },\n      ...stars,\n      ...obstacles,\n      rocket: { body: rocket, size: [50, 100], renderer: Rocket },\n      floor: {\n        body: floor,\n        size: [width + 100, 5],\n        renderer: Floor,\n      },\n    };\n  }\n\n  render() {\n    const { showOverlay, entities, score, appState } = this.state;\n    return (\n      <GameEngine\n        style={styles.container}\n        ref=\"engine\"\n        systems={[Physics, Tilt, Trajectory]}\n        entities={entities}\n        running={appState === 'active'}\n      >\n        <Score score={score} />\n        <StatusBar hidden />\n        <GameOver showOverlay={showOverlay} score={score} reloadApp={this.reloadApp} />\n      </GameEngine>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}