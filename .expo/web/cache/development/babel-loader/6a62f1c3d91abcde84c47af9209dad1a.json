{"ast":null,"code":"import Matter from 'matter-js';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport randomInt from 'random-int';\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar Tilt = function Tilt(state) {\n  var rocket = state.rocket;\n  var xTilt = rocket.body.tilt;\n  var xPos = rocket.body.position.x;\n\n  if (xPos >= width - 25 && xTilt > 0) {\n    xPos = width - 25;\n  } else if (xPos <= 25 && xTilt < 0) {\n    xPos = 25;\n  } else {\n    xPos += xTilt * 5;\n  }\n\n  Matter.Body.setPosition(rocket.body, {\n    x: xPos,\n    y: height - 200\n  });\n  return state;\n};\n\nvar Trajectory = function Trajectory(entities) {\n  var obstacles = Object.values(entities).filter(function (item) {\n    return item.body && item.body.label === 'obstacle';\n  });\n  obstacles.forEach(function (item) {\n    if (item.body.position.x > width || item.body.position.x < 0) {\n      Matter.Body.set(item.body, {\n        trajectory: randomInt(-5, 5) / 10\n      });\n      Matter.Body.setPosition(item.body, {\n        x: randomInt(0, width - 30),\n        y: 0\n      });\n    }\n\n    Matter.Body.setPosition(item.body, {\n      x: item.body.position.x + item.body.trajectory,\n      y: item.body.position.y\n    });\n  });\n  return entities;\n};\n\nvar Physics = function Physics(entities, _ref) {\n  var time = _ref.time;\n  var engine = entities.physics.engine;\n  engine.world.gravity.y = 0.5;\n  Matter.Engine.update(engine, time.delta);\n  return entities;\n};\n\nexport { Tilt, Physics, Trajectory };","map":{"version":3,"sources":["/Users/nmicjime/Desktop/TLG_ReactNative_Project/views/game/systems.js"],"names":["Matter","randomInt","Dimensions","get","width","height","Tilt","state","rocket","xTilt","body","tilt","xPos","position","x","Body","setPosition","y","Trajectory","entities","obstacles","Object","values","filter","item","label","forEach","set","trajectory","Physics","time","engine","physics","world","gravity","Engine","update","delta"],"mappings":"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","sourcesContent":["import Matter from 'matter-js';\nimport { Dimensions } from 'react-native';\nimport randomInt from 'random-int';\n\nconst { width, height } = Dimensions.get('window');\n\nconst Tilt = state => {\n  const { rocket } = state;\n  const xTilt = rocket.body.tilt;\n  let xPos = rocket.body.position.x;\n\n  if (xPos >= width - 25 && xTilt > 0) {\n    xPos = width - 25;\n  } else if (xPos <= 25 && xTilt < 0) {\n    xPos = 25;\n  } else {\n    xPos += xTilt * 5;\n  }\n\n  Matter.Body.setPosition(rocket.body, {\n    x: xPos,\n    y: height - 200,\n  });\n\n  return state;\n};\n\nconst Trajectory = entities => {\n  const obstacles = Object.values(entities).filter(\n    item => item.body && item.body.label === 'obstacle'\n  );\n\n  obstacles.forEach(item => {\n    if (item.body.position.x > width || item.body.position.x < 0) {\n      Matter.Body.set(item.body, {\n        trajectory: randomInt(-5, 5) / 10,\n      });\n      Matter.Body.setPosition(item.body, {\n        x: randomInt(0, width - 30),\n        y: 0,\n      });\n    }\n\n    Matter.Body.setPosition(item.body, {\n      x: item.body.position.x + item.body.trajectory,\n      y: item.body.position.y,\n    });\n  });\n\n  return entities;\n};\n\nconst Physics = (entities, { time }) => {\n  const { engine } = entities.physics;\n  engine.world.gravity.y = 0.5;\n  Matter.Engine.update(engine, time.delta);\n  return entities;\n};\n\nexport { Tilt, Physics, Trajectory };\n"]},"metadata":{},"sourceType":"module"}