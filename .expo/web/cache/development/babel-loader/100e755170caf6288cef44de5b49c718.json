{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/nmicjime/Desktop/TLG_ReactNative_Project/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport AppNavigator from \"./nav-stack\";\n\nvar App = function (_PureComponent) {\n  _inherits(App, _PureComponent);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      isLoadingComplete: false\n    };\n\n    _this.loadResourcesAsync = function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", Promise.all([Asset.loadAsync([require(\"./assets/images/icon.png\"), require(\"./assets/images/overlay-back.png\"), require(\"./assets/images/planet.png\"), require(\"./assets/images/rocketwithflames.gif\"), require(\"./assets/images/satellite.png\"), require(\"./assets/images/splash.png\"), require(\"./assets/images/star.png\"), require(\"./assets/images/ufo.gif\")]), Font.loadAsync({\n                orbitron: require(\"./assets/fonts/Orbitron-VariableFont-wght.ttf\")\n              })]));\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleLoadingError = function (error) {\n      console.warn(error);\n    };\n\n    _this.handleFinishLoading = function () {\n      _this.setState({\n        isLoadingComplete: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      if (!this.state.isLoadingComplete) {\n        return React.createElement(AppLoading, {\n          startAsync: this.loadResourcesAsync,\n          onError: this.handleLoadingError,\n          onFinish: this.handleFinishLoading,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return React.createElement(AppNavigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(PureComponent);\n\nexport { App as default };","map":{"version":3,"sources":["/Users/nmicjime/Desktop/TLG_ReactNative_Project/App.js"],"names":["React","PureComponent","Font","AppLoading","Asset","AppNavigator","App","state","isLoadingComplete","loadResourcesAsync","Promise","all","loadAsync","require","orbitron","handleLoadingError","error","console","warn","handleFinishLoading","setState"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,MAA3B;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,OAAOC,YAAP;;IAEqBC,G;;;;;;;;;;;;;;;UACnBC,K,GAAQ;AACNC,MAAAA,iBAAiB,EAAE;AADb,K;;UAIRC,kB,GAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,+CACnBC,OAAO,CAACC,GAAR,CAAY,CACVP,KAAK,CAACQ,SAAN,CAAgB,CACdC,OAAO,4BADO,EAEdA,OAAO,oCAFO,EAGdA,OAAO,8BAHO,EAIdA,OAAO,wCAJO,EAKdA,OAAO,iCALO,EAMdA,OAAO,8BANO,EAOdA,OAAO,4BAPO,EAQdA,OAAO,2BARO,CAAhB,CADU,EAWVX,IAAI,CAACU,SAAL,CAAe;AACbE,gBAAAA,QAAQ,EAAED,OAAO;AADJ,eAAf,CAXU,CAAZ,CADmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;UAiBrBE,kB,GAAqB,UAAAC,KAAK,EAAI;AAC5BC,MAAAA,OAAO,CAACC,IAAR,CAAaF,KAAb;AACD,K;;UAEDG,mB,GAAsB,YAAM;AAC1B,YAAKC,QAAL,CAAc;AAAEZ,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACD,K;;;;;;;6BAEQ;AACP,UAAI,CAAC,KAAKD,KAAL,CAAWC,iBAAhB,EAAmC;AACjC,eACE,oBAAC,UAAD;AACE,UAAA,UAAU,EAAE,KAAKC,kBADnB;AAEE,UAAA,OAAO,EAAE,KAAKM,kBAFhB;AAGE,UAAA,QAAQ,EAAE,KAAKI,mBAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAED,aAAO,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;;EA1C8BlB,a;;SAAZK,G","sourcesContent":["import React, { PureComponent } from 'react';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo';\nimport { Asset } from 'expo-asset';\nimport AppNavigator from './nav-stack';\n\nexport default class App extends PureComponent {\n  state = {\n    isLoadingComplete: false,\n  };\n\n  loadResourcesAsync = async () =>\n    Promise.all([\n      Asset.loadAsync([\n        require('./assets/images/icon.png'),\n        require('./assets/images/overlay-back.png'),\n        require('./assets/images/planet.png'),\n        require('./assets/images/rocketwithflames.gif'),\n        require('./assets/images/satellite.png'),\n        require('./assets/images/splash.png'),\n        require('./assets/images/star.png'),\n        require('./assets/images/ufo.gif'),\n      ]),\n      Font.loadAsync({\n        orbitron: require('./assets/fonts/Orbitron-VariableFont-wght.ttf'),\n      }),\n    ]);\n\n  handleLoadingError = error => {\n    console.warn(error);\n  };\n\n  handleFinishLoading = () => {\n    this.setState({ isLoadingComplete: true });\n  };\n\n  render() {\n    if (!this.state.isLoadingComplete) {\n      return (\n        <AppLoading\n          startAsync={this.loadResourcesAsync}\n          onError={this.handleLoadingError}\n          onFinish={this.handleFinishLoading}\n        />\n      );\n    }\n\n    return <AppNavigator />;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}