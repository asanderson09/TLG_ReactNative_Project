{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/nmicjime/Desktop/TLG_ReactNative_Project/views/game/game-over.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Button, Icon, Overlay } from 'react-native-elements';\nimport overlayBack from \"../../assets/images/overlay-back.png\";\nimport styles from \"./game-styles\";\nimport { Text } from \"../../components/text/text\";\nvar KEY = '@shaky-shuttle:high-score';\n\nvar GameOver = function GameOver(_ref) {\n  var showOverlay = _ref.showOverlay,\n      score = _ref.score,\n      reloadApp = _ref.reloadApp;\n\n  var _useState = useState('0'),\n      _useState2 = _slicedToArray(_useState, 2),\n      highScore = _useState2[0],\n      setHighScore = _useState2[1];\n\n  var storeData = function storeData() {\n    var storageHighScore;\n    return _regeneratorRuntime.async(function storeData$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!showOverlay) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(KEY));\n\n          case 4:\n            _context.t0 = _context.sent;\n\n            if (_context.t0) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.t0 = '0';\n\n          case 7:\n            storageHighScore = _context.t0;\n\n            if (!(score > parseInt(storageHighScore, 10))) {\n              _context.next = 14;\n              break;\n            }\n\n            setHighScore(score);\n            _context.next = 12;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(KEY, String(score)));\n\n          case 12:\n            _context.next = 15;\n            break;\n\n          case 14:\n            setHighScore(storageHighScore);\n\n          case 15:\n            _context.next = 20;\n            break;\n\n          case 17:\n            _context.prev = 17;\n            _context.t1 = _context[\"catch\"](1);\n            console.error('error saving high score');\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 17]], Promise);\n  };\n\n  useEffect(function () {\n    storeData();\n  }, [showOverlay]);\n  return React.createElement(Overlay, {\n    isVisible: showOverlay,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, React.createElement(ImageBackground, {\n    source: overlayBack,\n    style: styles.overlay,\n    imageStyle: {\n      opacity: 0.8,\n      backgroundColor: 'rgba(0,0,0,.6)'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    h1: true,\n    h1Style: styles.overlayText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Score\"), React.createElement(Text, {\n    h3: true,\n    h3Style: styles.overlayText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, score), React.createElement(Text, {\n    style: styles.overlayText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"High score - \", highScore), React.createElement(Button, {\n    title: \"Restart\",\n    buttonStyle: styles.button,\n    titleStyle: styles.buttonTitle,\n    onPress: reloadApp,\n    icon: React.createElement(Icon, {\n      name: \"rocket\",\n      size: 25,\n      type: \"font-awesome\",\n      color: \"#BB1F13\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }),\n    iconRight: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  })));\n};\n\nGameOver.propTypes = {\n  showOverlay: PropTypes.bool.isRequired,\n  score: PropTypes.number.isRequired,\n  reloadApp: PropTypes.func.isRequired\n};\nexport default GameOver;","map":{"version":3,"sources":["/Users/nmicjime/Desktop/TLG_ReactNative_Project/views/game/game-over.js"],"names":["React","useEffect","useState","PropTypes","Button","Icon","Overlay","overlayBack","styles","Text","KEY","GameOver","showOverlay","score","reloadApp","highScore","setHighScore","storeData","AsyncStorage","getItem","storageHighScore","parseInt","setItem","String","console","error","overlay","opacity","backgroundColor","overlayText","button","buttonTitle","propTypes","bool","isRequired","number","func"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ImageBackground, AsyncStorage, View } from 'react-native';\nimport { Button, Icon, Overlay } from 'react-native-elements';\nimport overlayBack from '../../assets/images/overlay-back.png';\nimport styles from './game-styles';\nimport { Text } from '../../components/text/text';\n\nconst KEY = '@shaky-shuttle:high-score';\n\nconst GameOver = ({ showOverlay, score, reloadApp }) => {\n  const [highScore, setHighScore] = useState('0');\n\n  const storeData = async () => {\n    if (showOverlay) {\n      try {\n        const storageHighScore = (await AsyncStorage.getItem(KEY)) || '0';\n\n        if (score > parseInt(storageHighScore, 10)) {\n          setHighScore(score);\n          await AsyncStorage.setItem(KEY, String(score));\n        } else {\n          setHighScore(storageHighScore);\n        }\n      } catch (error) {\n        console.error('error saving high score');\n      }\n    }\n  };\n\n  useEffect(() => {\n    storeData();\n  }, [showOverlay]);\n\n  return (\n    <Overlay isVisible={showOverlay}>\n      <ImageBackground\n        source={overlayBack}\n        style={styles.overlay}\n        imageStyle={{ opacity: 0.8, backgroundColor: 'rgba(0,0,0,.6)' }}\n      >\n        <Text h1 h1Style={styles.overlayText}>\n          Score\n        </Text>\n        <Text h3 h3Style={styles.overlayText}>\n          {score}\n        </Text>\n        <Text style={styles.overlayText}>High score - {highScore}</Text>\n        <Button\n          title=\"Restart\"\n          buttonStyle={styles.button}\n          titleStyle={styles.buttonTitle}\n          onPress={reloadApp}\n          icon={<Icon name=\"rocket\" size={25} type=\"font-awesome\" color=\"#BB1F13\" />}\n          iconRight\n        />\n      </ImageBackground>\n    </Overlay>\n  );\n};\n\nGameOver.propTypes = {\n  showOverlay: PropTypes.bool.isRequired,\n  score: PropTypes.number.isRequired,\n  reloadApp: PropTypes.func.isRequired,\n};\n\nexport default GameOver;\n"]},"metadata":{},"sourceType":"module"}